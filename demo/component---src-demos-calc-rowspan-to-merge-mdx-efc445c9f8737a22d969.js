(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{m3Lo:function(n,e,t){"use strict";t.r(e),t.d(e,"_frontmatter",(function(){return c})),t.d(e,"default",(function(){return d}));t("5hJT"),t("W1QL"),t("K/PF"),t("t91x"),t("75LO"),t("PJhk");var a=t("/FXl"),o=t("TjRS"),r=t("eAOS");t("aD51");function i(){return(i=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(n[a]=t[a])}return n}).apply(this,arguments)}var c={};void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/demos/calc-rowspan-to-merge.mdx"}});var p={_frontmatter:c},s=o.a;function d(n){var e=n.components,t=function(n,e){if(null==n)return{};var t,a,o={},r=Object.keys(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,["components"]);return Object(a.b)(s,i({},p,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"calc-rowspan-to-merge"},"Calc Rowspan To Merge"),Object(a.b)(r.a,{mdxType:"CalcRowspanToMerge"}),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-typescript"}),"/**\n * calcRowspanToMerge(items: T[], propName: string)\n * 计算需要纵向合并相邻的重复单元格\n * @description 指定对象索引值 propName，遍历一次 items，统计出数组中重复项，并返回 rowSpanMapping\n * 时间复杂度： O(n)\n * @param items T[]\n * @param propName string 用于判重\n * @returns rowSpanMapping number[] 单元格合并信息，数组元素与数组索引一一对应\n * @example 返回 [1,1,1,1,1,1] 无合并， [3,0,0,3,0,0] 表示索引 0~2，3~5 共 2 个合并的单元格，\n * @author Tony.Xu https://github.com/xunge0613\n */\n\n\nimport React, { FC, useState } from 'react'\nimport { Table, Button } from 'antd'\nimport 'antd/dist/antd.css'\nimport { ColumnProps } from 'antd/lib/table'\nimport  calcRowspanToMerge from 'antd-utils/src/table/calc-rowspan-to-merge'\n\ninterface IListItem {\n  id: string,\n  name: string,\n  category: string\n} \n\nexport const CalcRowspanToMerge: FC = () => {\n  const [data, setData] = useState<IListItem[]>([])\n  // 遍历一次获取 rowSpanMapping\n  const [rowSpanMapping, setRowSpanMapping] = useState<number[]>([])\n\n  function handleAddRow (category: string) {\n    // 插入新数据\n    const newRow: IListItem = {\n      id: Math.random() + '',\n      name: 'name' + Math.random(),\n      category\n    }\n    setData([...[...data, newRow]])\n    // console.log([...[...data, newRow]])\n\n    // 指定 propName 为 `category`，计算数组中重复项id，并生成 mapping\n    setRowSpanMapping([...calcRowspanToMerge([...[...data, newRow]], 'category')])\n  }\n\n  // 删除\n  function handleRemoveRow (index: number) {\n    let tempData = data;\n    (tempData || []).splice(index, 1);\n    setData([...tempData]);\n    setRowSpanMapping([...calcRowspanToMerge(tempData, 'category')])\n  }\n\n  /**\n   * 合并单元格\n   * 根据 index 查询 calcRowSpanMapping 确认 rowSpan\n   * @param record\n   * @param index\n   */\n  const renderMergedCell = (children: string | JSX.Element, index: number) => {\n    const obj = {\n      children,\n      // 通过 props 标记是否要进行行列合并\n      props: {\n        rowSpan: rowSpanMapping[index],\n      },\n    }\n    // console.log(obj)\n    return obj\n  }\n\n  const columns : ColumnProps<IListItem>[] = [\n    {\n      title: 'id',\n      dataIndex: 'id',\n    },\n    {\n      title: 'category',\n      dataIndex: 'category',\n      render: (_: string, record: IListItem, index: number) => {\n        return renderMergedCell(_, index)\n      }\n    },\n    {\n      title: 'name',\n      dataIndex: 'name', \n    },\n    {\n      title: 'category',\n      dataIndex: 'category',\n      render: (_: string, record: IListItem, index: number) => {\n        return (<Button onClick={() => handleRemoveRow(index)}>Remove</Button>)\n      }\n    },\n\n  ]\n\n  return (\n    <>\n      <Button onClick={() => handleAddRow(\"category1\")}>add category 1</Button>\n      <Button onClick={() => handleAddRow(\"category2\")} style={{marginLeft: 20}}>add category 2</Button>\n      <Button onClick={() => handleAddRow(\"category3\")} style={{marginLeft: 20}}>add category 3</Button>\n      <br /><br />\n      <Table\n        rowKey=\"id\"\n        dataSource={data}\n        columns={columns}\n        pagination={false}\n       />\n    </>\n  )\n}\n\n")))}void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/demos/calc-rowspan-to-merge.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-demos-calc-rowspan-to-merge-mdx-efc445c9f8737a22d969.js.map