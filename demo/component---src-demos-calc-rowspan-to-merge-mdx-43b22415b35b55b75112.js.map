{"version":3,"sources":["webpack:///../src/demos/calc-rowspan-to-merge.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","Props","CalcRowspanToMerge","parentName","isMDXComponent"],"mappings":"ggBAQO,IAAMA,EAAe,Q,qNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,yBADR,yBAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,yBAA0BC,SAAO,GAClEJ,QACAH,kBACAQ,eACAC,UACAC,wBALkE,gBAMlEV,IANkE,EAOlEH,eAPkE,GAQjEO,QAAQ,cACb,YAAC,IAAD,CAAoBA,QAAQ,wBAE1B,uBAAK,sBAAMO,WAAW,OAAU,CAC5B,UAAa,wBADZ,4+F,mNAuHTV,EAAWW,gBAAiB","file":"component---src-demos-calc-rowspan-to-merge-mdx-43b22415b35b55b75112.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/xuxun/Documents/projects/xx/antd-utils/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { CalcRowspanToMerge } from './calc-rowspan-to-merge';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"calc-rowspan-to-merge\"\n    }}>{`Calc Rowspan To Merge`}</h1>\n    <Playground __position={0} __code={'<CalcRowspanToMerge />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CalcRowspanToMerge,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CalcRowspanToMerge mdxType=\"CalcRowspanToMerge\" />\n    </Playground>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * calcRowspanToMerge(items: T[], propName: string)\n * 计算需要纵向合并相邻的重复单元格\n * @description 指定对象索引值 propName，遍历一次 items，统计出数组中重复项，并返回 rowSpanMapping\n * 时间复杂度： O(n)\n * @param items T[]\n * @param propName string 用于判重\n * @returns rowSpanMapping number[] 单元格合并信息，数组元素与数组索引一一对应\n * @example 返回 [1,1,1,1,1,1] 无合并， [3,0,0,3,0,0] 表示索引 0~2，3~5 共 2 个合并的单元格，\n * @author Tony.Xu https://github.com/xunge0613\n */\n\n\nimport React, { FC, useState } from 'react'\nimport { Table, Button } from 'antd'\nimport 'antd/dist/antd.css'\nimport { ColumnProps } from 'antd/lib/table'\nimport  calcRowspanToMerge from 'antd-utils/src/table/calc-rowspan-to-merge'\n\ninterface IListItem {\n  id: string,\n  name: string,\n  category: string\n} \n\nexport const CalcRowspanToMerge: FC = () => {\n  const [data, setData] = useState<IListItem[]>([])\n  // 遍历一次获取 rowSpanMapping\n  const [rowSpanMapping, setRowSpanMapping] = useState<number[]>([])\n\n  function handleAddRow (category: string) {\n    // 插入新数据\n    const newRow: IListItem = {\n      id: Math.random() + '',\n      name: 'name' + Math.random(),\n      category\n    }\n    setData([...[...data, newRow]])\n    // console.log([...[...data, newRow]])\n\n    // 指定 propName 为 \\`category\\`，计算数组中重复项id，并生成 mapping\n    setRowSpanMapping([...calcRowspanToMerge([...[...data, newRow]], 'category')])\n  }\n\n  // 删除\n  function handleRemoveRow (index: number) {\n    let tempData = data;\n    (tempData || []).splice(index, 1);\n    setData([...tempData]);\n    setRowSpanMapping([...calcRowspanToMerge(tempData, 'category')])\n  }\n\n  /**\n   * 合并单元格\n   * 根据 index 查询 calcRowSpanMapping 确认 rowSpan\n   * @param record\n   * @param index\n   */\n  const renderMergedCell = (children: string | JSX.Element, index: number) => {\n    const obj = {\n      children,\n      // 通过 props 标记是否要进行行列合并\n      props: {\n        rowSpan: rowSpanMapping[index],\n      },\n    }\n    // console.log(obj)\n    return obj\n  }\n\n  const columns : ColumnProps<IListItem>[] = [\n    {\n      title: 'id',\n      dataIndex: 'id',\n    },\n    {\n      title: 'category',\n      dataIndex: 'category',\n      render: (_: string, record: IListItem, index: number) => {\n        return renderMergedCell(_, index)\n      }\n    },\n    {\n      title: 'name',\n      dataIndex: 'name', \n    },\n    {\n      title: 'category',\n      dataIndex: 'category',\n      render: (_: string, record: IListItem, index: number) => {\n        return (<Button onClick={() => handleRemoveRow(index)}>Remove</Button>)\n      }\n    },\n\n  ]\n\n  return (\n    <>\n      <Button onClick={() => handleAddRow(\"category1\")}>add category 1</Button>\n      <Button onClick={() => handleAddRow(\"category2\")} style={{marginLeft: 20}}>add category 2</Button>\n      <Button onClick={() => handleAddRow(\"category3\")} style={{marginLeft: 20}}>add category 3</Button>\n      <br /><br />\n      <Table\n        rowKey=\"id\"\n        dataSource={data}\n        columns={columns}\n        pagination={false}\n       />\n    </>\n  )\n}\n\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}